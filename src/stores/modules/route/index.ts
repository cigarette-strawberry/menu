import { computed, nextTick, ref, shallowRef } from 'vue';
import type { RouteRecordRaw } from 'vue-router';
import { defineStore } from 'pinia';
import { SetupStoreId } from '@/enum';
import { useTabStore } from '../tab';
import type { CustomRoute, ElegantConstRoute, LastLevelRouteKey, RouteKey, RouteMap } from '@elegant-router/types';
import { getCacheRouteNames, getSelectedMenuKeyPathByKey, transformMenuToSearchMenus } from './shared';

export const useRouteStore = defineStore(SetupStoreId.Route, () => {
  const tabStore = useTabStore();

  /**
   * Auth route mode
   *
   * It recommends to use static mode in the development environment, and use dynamic mode in the production
   * environment, if use static mode in development environment, the auth routes will be auto generated by plugin
   * "@elegant-router/vue"
   */
  const authRouteMode = ref(import.meta.env.VITE_AUTH_ROUTE_MODE);

  /** Home route key */
  const routeHome = ref(import.meta.env.VITE_ROUTE_HOME);

  /**
   * Set route home
   *
   * @param routeKey Route key
   */
  function setRouteHome(routeKey: LastLevelRouteKey) {
    routeHome.value = routeKey;
  }

  /** constant routes */
  const constantRoutes = shallowRef<ElegantConstRoute[]>([]);

  function addConstantRoutes(routes: ElegantConstRoute[]) {
    const constantRoutesMap = new Map<string, ElegantConstRoute>([]);

    routes.forEach(route => {
      constantRoutesMap.set(route.name, route);
    });

    constantRoutes.value = Array.from(constantRoutesMap.values());
  }

  /** auth routes */
  const authRoutes = shallowRef<ElegantConstRoute[]>([]);

  function addAuthRoutes(routes: ElegantConstRoute[]) {
    const authRoutesMap = new Map<string, ElegantConstRoute>([]);

    routes.forEach(route => {
      authRoutesMap.set(route.name, route);
    });

    authRoutes.value = Array.from(authRoutesMap.values());
  }

  const removeRouteFns: (() => void)[] = [];

  /** Global menus */
  const menus = ref<App.Global.Menu[]>([
    {
      key: 'multi-menu',
      label: '多级菜单',
      i18nKey: 'route.multi-menu',
      routeKey: 'multi-menu',
      routePath: '/multi-menu',
      children: [
        {
          key: 'multi-menu_first',
          label: '菜单一',
          i18nKey: 'route.multi-menu_first',
          routeKey: 'multi-menu_first',
          routePath: '/multi-menu/first',
          children: [
            {
              key: 'multi-menu_first_child',
              label: '菜单一子菜单',
              i18nKey: 'route.multi-menu_first_child',
              routeKey: 'multi-menu_first_child',
              routePath: '/multi-menu/first/child'
            }
          ]
        },
        {
          key: 'multi-menu_second',
          label: '菜单二',
          i18nKey: 'route.multi-menu_second',
          routeKey: 'multi-menu_second',
          routePath: '/multi-menu/second',
          children: [
            {
              key: 'multi-menu_second_child',
              label: '菜单二子菜单',
              i18nKey: 'route.multi-menu_second_child',
              routeKey: 'multi-menu_second_child',
              routePath: '/multi-menu/second/child',
              children: [
                {
                  key: 'multi-menu_second_child_home',
                  label: '菜单二子菜单首页',
                  i18nKey: 'route.multi-menu_second_child_home',
                  routeKey: 'multi-menu_second_child_home',
                  routePath: '/multi-menu/second/child/home'
                }
              ]
            }
          ]
        }
      ]
    }
  ]);
  const searchMenus = computed(() => transformMenuToSearchMenus(menus.value));

  /** Cache routes */
  const cacheRoutes = ref<RouteKey[]>([]);

  /**
   * Exclude cache routes
   *
   * for reset route cache
   */
  const excludeCacheRoutes = ref<RouteKey[]>([]);

  /**
   * Get cache routes
   *
   * @param routes Vue routes
   */
  function getCacheRoutes(routes: RouteRecordRaw[]) {
    cacheRoutes.value = getCacheRouteNames(routes);
  }

  /** Reset vue routes */
  function resetVueRoutes() {
    removeRouteFns.forEach(fn => fn());
    removeRouteFns.length = 0;
  }

  /**
   * Get selected menu key path
   *
   * @param selectedKey Selected menu key
   */
  function getSelectedMenuKeyPath(selectedKey: string) {
    return getSelectedMenuKeyPathByKey(selectedKey, menus.value);
  }

  async function onRouteSwitchWhenNotLoggedIn() {
    // some global init logic if it does not need to be logged in
  }

  return {
    routeHome,
    menus,
    searchMenus,
    cacheRoutes,
    excludeCacheRoutes,
    getSelectedMenuKeyPath,
    onRouteSwitchWhenNotLoggedIn
  };
});
